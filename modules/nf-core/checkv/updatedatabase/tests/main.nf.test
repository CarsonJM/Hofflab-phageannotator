nextflow_process {

    name "Test Process CHECKV_UPDATEDATABASE"
    script "../main.nf"
    process "CHECKV_UPDATEDATABASE"


    setup {
        run("CHECKV_DOWNLOADDATABASE") {
            script "../../downloaddatabase/main.nf"
        }
    }


    test("sarscov2 - genome - genome_fasta") {
        when {
            params {
                outdir   = "${outputDir}"
            }
            process {
                """
                input[0] = Channel.of(
                    [
                        [ id: 'test' ],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                )
                input[1] = CHECKV_DOWNLOADDATABASE.out.checkv_db
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert new File("${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.dmnd.log").exists() },
                { assert new File("${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.dmnd").exists() },
                { assert snapshot(
                    "${process.out.checkv_db.get(0).get(1).get(0)}",
                    "${process.out.checkv_db.get(0).get(1).get(2)}",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/changelog.tsv",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_error.tsv",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_info.tsv",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.faa",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.fna",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.log",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.tsv",
                    process.out.versions
                    ).match()
                },
            )
        }
    }


    test("sarscov2 - genome - genome_fasta - stub") {
        when {
            process {
                """
                input[0] = Channel.of(
                    [
                        [ id: 'test' ],
                        file(params.test_data['sarscov2']['genome']['genome_fasta'], checkIfExists: true)
                    ]
                )
                input[1] = CHECKV_DOWNLOADDATABASE.out.checkv_db
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert new File("${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.dmnd.log").exists() },
                { assert new File("${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.dmnd").exists() },
                { assert snapshot(
                    "${process.out.checkv_db.get(0).get(1).get(0)}",
                    "${process.out.checkv_db.get(0).get(1).get(2)}",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/changelog.tsv",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_error.tsv",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_info.tsv",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.faa",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.fna",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.log",
                    "${process.out.checkv_db.get(0).get(1).get(1)}/checkv_reps.tsv",
                    process.out.versions
                    ).match()
                }
            )
        }
    }
}
