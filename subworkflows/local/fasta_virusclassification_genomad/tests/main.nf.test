nextflow_workflow {

    name "Test Subworkflow: FASTA_VIRUSCLASSIFICATION_GENOMAD"
    script "../main.nf"
    workflow "FASTA_VIRUSCLASSIFICATION_GENOMAD"


    setup {
        run("GENOMAD_DOWNLOAD") {
            script "../../../../modules/nf-core/genomad/download/main.nf"
        }
    }


    test("fasta.gz + no_db") {
        when {
            params {
                genomad_args    = "--splits 5 --sensitivity 0.1 --disable-find-proviruses"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test', assembler: 'megahit'],
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists: true)
                    ],
                    [
                        [ id:'test2', assembler: 'megahit' ],
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists: true)
                    ]
                )
                input[1] = null
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }


    test("fasta.gz + db") {
        when {
            params {
                genomad_args    = "--splits 5 --sensitivity 0.1 --disable-find-proviruses"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test', assembler: 'megahit' ],
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists: true)
                    ],
                    [
                        [ id:'test2', assembler: 'megahit' ],
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/genome/genome.fna.gz', checkIfExists: true)
                    ]
                )
                input[1] = GENOMAD_DOWNLOAD.out.genomad_db
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }
}
