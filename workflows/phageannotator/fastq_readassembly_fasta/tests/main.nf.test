nextflow_workflow {

    name "Test Subworkflow: FASTQ_READASSEMBLY_FASTA"
    script "../main.nf"
    workflow "FASTQ_READASSEMBLY_FASTA"

    test("fastq - metaspades") {
        when {
            params {
                run_metaspades_single       = true
                run_metaspades_coassembly   = true
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.preprocessed_fastq_gz,
                    workflow.out.versions,
                    ).match()
                }
            )
        }
    }

    test("fastq - megahit") {
        when {
            params {
                run_megahit_single      = true
                run_megahit_coassembly  = true
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.preprocessed_fastq_gz,
                    workflow.out.versions,
                    ).match()
                }
            )
        }
    }

    test("fastq - penguin") {
        when {
            params {
                run_penguin_single      = true
                run_penguin_coassembly  = true
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.preprocessed_fastq_gz,
                    workflow.out.versions,
                    ).match()
                }
            )
        }
    }

    test("fastq - nothing") {
        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.preprocessed_fastq_gz,
                    workflow.out.versions,
                    ).match()
                }
            )
        }
    }

    test("fastq - all") {
        when {
            params {
                run_metaspades_single       = true
                run_metaspades_coassembly   = true
                run_megahit_single          = true
                run_megahit_coassembly      = true
                run_penguin_single          = true
                run_penguin_coassembly      = true
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test1_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.preprocessed_fastq_gz,
                    workflow.out.versions,
                    ).match()
                }
            )
        }
    }
}
